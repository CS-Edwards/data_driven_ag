library(readr)
library(maptools)
library(readr)
#library(maptools)
library(ggplot2)
library(raster)
library(psych)
library(gmodels)
library(FactoMineR) #library for conducting PCA
library(readr)
#library(maptools)
library(ggplot2)
library(raster)
library(psych)
library(gmodels)
#library(FactoMineR) #library for conducting PCA
library(factoextra) # library for plotting PCA
library(missMDA) #for imputing if you have missing data
library(readr)
#library(maptools)
library(ggplot2)
library(raster)
library(psych)
library(gmodels)
#library(FactoMineR) #library for conducting PCA
library(factoextra) # library for plotting PCA
#library(missMDA) #for imputing if you have missing data
library(hyperoverlap)
library(Rmisc)
library(car)
library(dplyr)
library(ggplot2)
library(MuMIn)
library(readr)
#library(maptools)
library(ggplot2)
library(raster)
library(psych)
library(gmodels)
#library(FactoMineR) #library for conducting PCA
library(factoextra) # library for plotting PCA
#library(missMDA) #for imputing if you have missing data
library(hyperoverlap)
library(Rmisc)
library(car)
library(dplyr)
library(ggplot2)
#library(MuMIn)
library(drc)
library(rcompanion)
library(nlstools)
df <- read.csv("/week2/Dry_Bean_Dataset.csv")
getwd()
df <- read.csv("Dry_Bean_Dataset.csv")
df <- read.csv("Drybean_Dataset.csv")
head(df)
str(df)
summary(df)
df$Class=as.factor(df$Class)
ggplot(data=df,mapping=aes(x=Area,y=Eccentricity ,color=Class)) +
#geom_point() +
geom_smooth() +
theme_bw()+
labs(title="Area x Eccentricity") +
xlab("Area") +
ylab("Eccentricity")
fit_lm <- lm(Eccentricity~Area, df)
summary(fit_lm)
#SOYBEAN
ci_fit_lm <- predict(fit_lm,x=Area,interval="confidence",level=0.95)
pi_fit_lm <- predict(fit_lm,x=Area,interval="prediction",level=0.95)
plot(x=df$Area,y=df$Eccentricity,xlab="Area",ylab="Eccentricity",main="Area x Eccentricity", ylim=c(0,1.2),col="purple")
lines(df$Area,ci_fit_lm[,1], col="black")# plot best fit line
lines(df$Area,ci_fit_lm[,2], col="red") #plot CI lower bound
lines(df$Area,ci_fit_lm[,3], col="red") #plot CI upper bound
lines(df$Area,pi_fit_lm[,2], col="gold")#plot PI lowerbound
lines(df$Area,pi_fit_lm[,3], col="gold")#plot PI upperbound
#####what about a polynomial
fit_lm2 <- lm(Eccentricity~poly(Area,2), df)
summary(fit_lm2)
df$Class
fit_lm <- lm(Eccentricity~Area, df)
summary(fit_lm)
#SOYBEAN
ci_fit_lm <- predict(fit_lm,x=Area,interval="confidence",level=0.95)
pi_fit_lm <- predict(fit_lm,x=Area,interval="prediction",level=0.95)
plot(x=df$Area,y=df$Eccentricity,xlab="Area",ylab="Eccentricity",main="Area x Eccentricity", ylim=c(0,1.2),col="purple")
lines(df$Area,ci_fit_lm[,1], col="black")# plot best fit line
lines(df$Area,ci_fit_lm[,2], col="red") #plot CI lower bound
lines(df$Area,ci_fit_lm[,3], col="red") #plot CI upper bound
lines(df$Area,pi_fit_lm[,2], col="gold")#plot PI lowerbound
lines(df$Area,pi_fit_lm[,3], col="gold")#plot PI upperbound
#####what about a polynomial
fit_lm2 <- lm(Eccentricity~poly(Area,2), df)
summary(fit_lm2)
??lm
fm <- drm(Eccentricity ~ Area, data = df, fct = G.3u())
confint(fm)
plot(fm)
summary(fm)
fit.lm    = lm(Eccentricity ~ Area, data = df)
a.ini     = fit.lm$coefficients[1]
b.ini     = fit.lm$coefficients[2]
clx.ini   = mean(df$Area)
###  Define linear plateau function
linplat = function(x, a, b, clx)
{ifelse(x < clx, a + b * x,
a + b * clx)}
###  Find best fit parameters
model = nls(Eccentricity ~ linplat(Area, a, b, clx),
data = df,
start = list(a   = a.ini,
b   = b.ini,
clx = clx.ini),
trace = FALSE,
nls.control(maxiter = 1000))
summary(model)
###  Define null model
nullfunct = function(x, m){m}
m.ini    = mean(df$Eccentricity)
null = nls(Eccentricity ~ nullfunct(Area, m),
data = df,
start = list(m   = m.ini),
trace = FALSE,
nls.control(maxiter = 1000))
###  Find p-value and pseudo R-squared
nagelkerke(model, null)
confint2(model, level = 0.95)
Boot = nlsBoot(model)
summary(Boot)
plotPredy(data  = df,
x     = Area,
y     = Eccentricity,
model = model,
xlab  = "Area",
ylab  = "Eccentricity")
###  Find reasonable initial values for parameters
fit.lm    = lm(Eccentricity ~ Area, data=df)
a.ini     = fit.lm$coefficients[1]
b.ini     = fit.lm$coefficients[2]
clx.ini   = mean(df$Area)
###  Define quadratic plateau function
quadplat = function(x, a, b, clx) {
ifelse(x  < clx, a + b * x   + (-0.5*b/clx) * x   * x,
a + b * clx + (-0.5*b/clx) * clx * clx)}
###  Find best fit parameters
model = nls(Eccentricity ~ quadplat(Area, a, b, clx),
data = df,
start = list(a   = a.ini,
b   = b.ini,
clx = clx.ini),
trace = FALSE,
nls.control(maxiter = 1000))
summary(model)
###  Define null model
nullfunct = function(x, m){m}
m.ini    = mean(df$Eccentricity)
null = nls(Eccentricity ~ nullfunct(Area, m),
data = df,
start = list(m   = m.ini),
trace = FALSE,
nls.control(maxiter = 1000))
###  Find p-value and pseudo R-squared
library(rcompanion)
nagelkerke(model, null)
confint2(model,level = 0.95)
Boot = nlsBoot(model)
summary(Boot)
plotPredy(data  = df,
x     = Area,
y     = Eccentricity,
model = model,
xlab  = "Area",
ylab  = "Eccentricity")
?filter
?filter
df_in <- read.csv("Drybean_Dataset.csv")
## filter dataframe by Class name
df <- filter(df_in, class == 'SEKER')
df_in <- read.csv("Drybean_Dataset.csv")
## filter dataframe by Class name
df <- filter(df_in, Class == 'SEKER')
head(df)
str(df)
summary(df)
df$Class=as.factor(df$Class)
ggplot(data=df,mapping=aes(x=Area,y=Eccentricity ,color=Class)) +
#geom_point() +
geom_smooth() +
theme_bw()+
labs(title="Area x Eccentricity") +
xlab("Area") +
ylab("Eccentricity")
fit_lm <- lm(Eccentricity~Area, df)
summary(fit_lm)
#SOYBEAN/
ci_fit_lm <- predict(fit_lm,x=Area,interval="confidence",level=0.95)
pi_fit_lm <- predict(fit_lm,x=Area,interval="prediction",level=0.95)
plot(x=df$Area,y=df$Eccentricity,xlab="Area",ylab="Eccentricity",main="Area x Eccentricity", ylim=c(0,1.2),col="purple")
lines(df$Area,ci_fit_lm[,1], col="black")# plot best fit line
lines(df$Area,ci_fit_lm[,2], col="red") #plot CI lower bound
lines(df$Area,ci_fit_lm[,3], col="red") #plot CI upper bound
lines(df$Area,pi_fit_lm[,2], col="gold")#plot PI lowerbound
lines(df$Area,pi_fit_lm[,3], col="gold")#plot PI upperbound
#####what about a polynomial
fit_lm2 <- lm(Eccentricity~poly(Area,2), df)
summary(fit_lm2)
fit_lm <- lm(Eccentricity~Area, df)
summary(fit_lm)
#SOYBEAN/
ci_fit_lm <- predict(fit_lm,x=Area,interval="confidence",level=0.95)
pi_fit_lm <- predict(fit_lm,x=Area,interval="prediction",level=0.95)
plot(x=df$Area,y=df$Eccentricity,xlab="Area",ylab="Eccentricity",main="Area x Eccentricity", ylim=c(0,1.2),col="purple")
lines(df$Area,ci_fit_lm[,1], col="black")# plot best fit line
lines(df$Area,ci_fit_lm[,2], col="red") #plot CI lower bound
lines(df$Area,ci_fit_lm[,3], col="red") #plot CI upper bound
lines(df$Area,pi_fit_lm[,2], col="gold")#plot PI lowerbound
lines(df$Area,pi_fit_lm[,3], col="gold")#plot PI upperbound
#####what about a polynomial
fit_lm2 <- lm(Eccentricity~poly(Area,2), df)
summary(fit_lm2)
ggplot(data=df,mapping=aes(x=Area,y=Eccentricity ,color=Class)) +
#geom_point() +
geom_smooth() +
theme_bw()+
labs(title="SEKER: Area x Eccentricity") +
xlab("Area") +
ylab("Eccentricity")
fm <- drm(Eccentricity ~ Area, data = df, fct = G.3u())
confint(fm)
plot(fm)
summary(fm)
fit.lm    = lm(Eccentricity ~ Area, data = df)
a.ini     = fit.lm$coefficients[1]
b.ini     = fit.lm$coefficients[2]
clx.ini   = mean(df$Area)
###  Define linear plateau function
linplat = function(x, a, b, clx)
{ifelse(x < clx, a + b * x,
a + b * clx)}
###  Find best fit parameters
model = nls(Eccentricity ~ linplat(Area, a, b, clx),
data = df,
start = list(a   = a.ini,
b   = b.ini,
clx = clx.ini),
trace = FALSE,
nls.control(maxiter = 1000))
summary(model)
###  Define null model
nullfunct = function(x, m){m}
m.ini    = mean(df$Eccentricity)
null = nls(Eccentricity ~ nullfunct(Area, m),
data = df,
start = list(m   = m.ini),
trace = FALSE,
nls.control(maxiter = 1000))
###  Find p-value and pseudo R-squared
nagelkerke(model, null)
confint2(model, level = 0.95)
Boot = nlsBoot(model)
?nlsBoot
Boot = nlsBoot(model, niter=10)
summary(Boot)
Boot = nlsBoot(model, niter=65)
model = nls(Eccentricity ~ linplat(Area, a, b, clx),
data = df,
start = list(a   = a.ini,
b   = b.ini,
clx = clx.ini),
trace = FALSE,
nls.control(maxiter = 1000))
summary(model)
nullfunct = function(x, m){m}
m.ini    = mean(df$Eccentricity)
null = nls(Eccentricity ~ nullfunct(Area, m),
data = df,
start = list(m   = m.ini),
trace = FALSE,
nls.control(maxiter = 1000))
nagelkerke(model, null)
confint2(model, level = 0.95)
Boot = nlsBoot(model)
fit_lm <- lm(Eccentricity~Area, df)
summary(fit_lm)
#SOYBEAN/
ci_fit_lm <- predict(fit_lm,x=Area,interval="confidence",level=0.95)
pi_fit_lm <- predict(fit_lm,x=Area,interval="prediction",level=0.95)
plot(x=df$Area,y=df$Eccentricity,xlab="Area",ylab="Eccentricity",main="Area x Eccentricity", ylim=c(0,1.2),col="purple")
lines(df$Area,ci_fit_lm[,1], col="black")# plot best fit line
lines(df$Area,ci_fit_lm[,2], col="red") #plot CI lower bound
lines(df$Area,ci_fit_lm[,3], col="red") #plot CI upper bound
lines(df$Area,pi_fit_lm[,2], col="gold")#plot PI lowerbound
lines(df$Area,pi_fit_lm[,3], col="gold")#plot PI upperbound
#####what about a polynomial
fit_lm2 <- lm(Eccentricity~poly(Area,2), df)
summary(fit_lm2)
fm <- drm(Eccentricity ~ Area, data = df, fct = G.3u())
confint(fm)
plot(fm)
summary(fm)
fit.lm    = lm(Eccentricity ~ Area, data = df)
a.ini     = fit.lm$coefficients[1]
b.ini     = fit.lm$coefficients[2]
clx.ini   = mean(df$Area)
###  Define linear plateau function
linplat = function(x, a, b, clx)
{ifelse(x < clx, a + b * x,
a + b * clx)}
###  Find best fit parameters
model = nls(Eccentricity ~ linplat(Area, a, b, clx),
data = df,
start = list(a   = a.ini,
b   = b.ini,
clx = clx.ini),
trace = FALSE,
nls.control(maxiter = 1000))
summary(model)
###  Define null model
nullfunct = function(x, m){m}
m.ini    = mean(df$Eccentricity)
null = nls(Eccentricity ~ nullfunct(Area, m),
data = df,
start = list(m   = m.ini),
trace = FALSE,
nls.control(maxiter = 1000))
###  Find p-value and pseudo R-squared
nagelkerke(model, null)
#Boot does not work for this model; model is not good fit for the data
confint2(model, level = 0.95)
#Boot = nlsBoot(model)
#summary(Boot)
plotPredy(data  = df,
x     = Area,
y     = Eccentricity,
model = model,
xlab  = "Area",
ylab  = "Eccentricity")
###  Find reasonable initial values for parameters
fit.lm    = lm(Eccentricity ~ Area, data=df)
a.ini     = fit.lm$coefficients[1]
b.ini     = fit.lm$coefficients[2]
clx.ini   = mean(df$Area)
###  Define quadratic plateau function
quadplat = function(x, a, b, clx) {
ifelse(x  < clx, a + b * x   + (-0.5*b/clx) * x   * x,
a + b * clx + (-0.5*b/clx) * clx * clx)}
###  Find best fit parameters
model = nls(Eccentricity ~ quadplat(Area, a, b, clx),
data = df,
start = list(a   = a.ini,
b   = b.ini,
clx = clx.ini),
trace = FALSE,
nls.control(maxiter = 1000))
summary(model)
###  Define null model
nullfunct = function(x, m){m}
m.ini    = mean(df$Eccentricity)
null = nls(Eccentricity ~ nullfunct(Area, m),
data = df,
start = list(m   = m.ini),
trace = FALSE,
nls.control(maxiter = 1000))
###  Find p-value and pseudo R-squared
library(rcompanion)
nagelkerke(model, null)
confint2(model,level = 0.95)
Boot = nlsBoot(model)
summary(Boot)
plotPredy(data  = df,
x     = Area,
y     = Eccentricity,
model = model,
xlab  = "Area",
ylab  = "Eccentricity")
fit_lm <- lm(Eccentricity~Area, df)
summary(fit_lm)
#SOYBEAN/
ci_fit_lm <- predict(fit_lm,x=Area,interval="confidence",level=0.95)
pi_fit_lm <- predict(fit_lm,x=Area,interval="prediction",level=0.95)
plot(x=df$Area,y=df$Eccentricity,xlab="Area",ylab="Eccentricity",main="Area x Eccentricity", ylim=c(0,1.2),col="purple")
lines(df$Area,ci_fit_lm[,1], col="black")# plot best fit line
lines(df$Area,ci_fit_lm[,2], col="red") #plot CI lower bound
lines(df$Area,ci_fit_lm[,3], col="red") #plot CI upper bound
lines(df$Area,pi_fit_lm[,2], col="gold")#plot PI lowerbound
lines(df$Area,pi_fit_lm[,3], col="gold")#plot PI upperbound
#####what about a polynomial
fit_lm2 <- lm(Eccentricity~poly(Area,2, raw = T), df)
summary(fit_lm2)
fit_lm <- lm(Eccentricity~Area, df)
summary(fit_lm)
#SOYBEAN/
ci_fit_lm <- predict(fit_lm,x=Area,interval="confidence",level=0.95)
pi_fit_lm <- predict(fit_lm,x=Area,interval="prediction",level=0.95)
plot(x=df$Area,y=df$Eccentricity,xlab="Area",ylab="Eccentricity",main="Area x Eccentricity", ylim=c(0,1),col="purple")
lines(df$Area,ci_fit_lm[,1], col="black")# plot best fit line
lines(df$Area,ci_fit_lm[,2], col="red") #plot CI lower bound
lines(df$Area,ci_fit_lm[,3], col="red") #plot CI upper bound
lines(df$Area,pi_fit_lm[,2], col="gold")#plot PI lowerbound
lines(df$Area,pi_fit_lm[,3], col="gold")#plot PI upperbound
#####what about a polynomial
fit_lm2 <- lm(Eccentricity~poly(Area,2, raw = T), df)
summary(fit_lm2)
